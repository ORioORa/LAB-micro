#include <Arduino.h>

const int sensorPin = 2;  // ‡∏Ç‡∏≤‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå (‡πÉ‡∏ä‡πâ‡∏Ç‡∏≤ Interrupt 0 = D2 ‡∏ö‡∏ô Arduino Uno)
volatile unsigned int pulseCount = 0; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏±‡∏•‡∏™‡πå
unsigned long lastTime = 0;
unsigned long startTime = 0; // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
const int interval = 1000; // ‡∏ß‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
const int pulsesPerRevolution = 1; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏±‡∏•‡∏™‡πå‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô 1 ‡∏£‡∏≠‡∏ö (‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ)

int lastMinuteAlert = -1; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏ô‡∏≤‡∏ó‡∏µ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
float totalRPM = 0; // ‡∏™‡∏∞‡∏™‡∏°‡∏Ñ‡πà‡∏≤ RPM
float sumRPM = 0; // ‡∏Ñ‡πà‡∏≤ RPM ‡∏£‡∏ß‡∏°‡πÉ‡∏ô 1 ‡∏ô‡∏≤‡∏ó‡∏µ
int rpmCount = 0; // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡∏ô‡∏≤‡∏ó‡∏µ

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Interrupt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏ö‡∏û‡∏±‡∏•‡∏™‡πå
void countPulse() {
    pulseCount++; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏û‡∏±‡∏•‡∏™‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î Interrupt
}

void displayTime(unsigned long elapsedTime) {
    int hours = elapsedTime / 3600;
    int minutes = (elapsedTime % 3600) / 60;
    int seconds = elapsedTime % 60;

    Serial.print("Time: ");
    if (hours < 10) Serial.print("0");
    Serial.print(hours);
    Serial.print(":");

    if (minutes < 10) Serial.print("0");
    Serial.print(minutes);
    Serial.print(":");

    if (seconds < 10) Serial.print("0");
    Serial.println(seconds);
}

void setup() {
    Serial.begin(9600);
    pinMode(sensorPin, INPUT_PULLUP);
    attachInterrupt(digitalPinToInterrupt(sensorPin), countPulse, RISING); // ‡πÉ‡∏ä‡πâ Interrupt ‡∏ô‡∏±‡∏ö‡∏û‡∏±‡∏•‡∏™‡πå‡∏Ç‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô
    startTime = millis(); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
}

void loop() {
    unsigned long currentTime = millis();
    unsigned long elapsedTime = (currentTime - startTime) / 1000; // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    
    if (currentTime - lastTime >= interval) { // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        detachInterrupt(digitalPinToInterrupt(sensorPin)); // ‡∏õ‡∏¥‡∏î Interrupt ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏Ç‡∏ì‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
        float rpm = (pulseCount / (float)pulsesPerRevolution) * 60.0; // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì RPM
        displayTime(elapsedTime); // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤
        Serial.print("RPM: ");
        Serial.println(rpm);

        // ‡∏™‡∏∞‡∏™‡∏°‡∏Ñ‡πà‡∏≤ RPM
        totalRPM += rpm;
        sumRPM += rpm;
        rpmCount++;

        pulseCount = 0; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏û‡∏±‡∏•‡∏™‡πå
        lastTime = currentTime; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        attachInterrupt(digitalPinToInterrupt(sensorPin), countPulse, RISING); // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Interrupt ‡πÉ‡∏´‡∏°‡πà
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤ RPM ‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ
    int currentMinutes = elapsedTime / 60;
    if (currentMinutes != lastMinuteAlert && elapsedTime % 60 == 0) {
        float averageRPM = (rpmCount > 0) ? (totalRPM / rpmCount) : 0;
        
        Serial.print("‚è∞ ‡∏Ñ‡∏£‡∏ö ");
        Serial.print(currentMinutes);
        Serial.println(" ‡∏ô‡∏≤‡∏ó‡∏µ!");

        displayTime(elapsedTime);
        Serial.print("üî• RPM ‡∏£‡∏ß‡∏°‡πÉ‡∏ô 1 ‡∏ô‡∏≤‡∏ó‡∏µ: ");
        Serial.println(sumRPM);
        Serial.print("‚ö° RPM ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÉ‡∏ô 1 ‡∏ô‡∏≤‡∏ó‡∏µ: ");
        Serial.println(averageRPM);
        Serial.println("‚è≥üîÑ");

        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏™‡∏°‡∏Ç‡∏≠‡∏á 1 ‡∏ô‡∏≤‡∏ó‡∏µ
        totalRPM = 0;
        sumRPM = 0;
        rpmCount = 0;

        lastMinuteAlert = currentMinutes;
    }
}
